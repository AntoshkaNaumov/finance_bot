import logging
import os
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from state import *
from handler import *  # –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–∑ handlers.py
from tax_deduction import calculate_tax_deduction2
from social_deductions import calculate_child_education_deduction

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot_token = os.getenv("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot = Bot(token=bot_token)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
dp.register_message_handler(start, commands=['start'])
dp.register_message_handler(deposit_calculation, lambda message: message.text == "üí∞üîÑ –†–∞—Å—á–µ—Ç –≤–∫–ª–∞–¥–∞")
dp.register_message_handler(process_rate, state=DepositCalculationStates.waiting_for_rate)
dp.register_message_handler(process_term, state=DepositCalculationStates.waiting_for_term)
dp.register_message_handler(process_amount, state=DepositCalculationStates.waiting_for_amount)

dp.register_message_handler(personal_budget, text="üí∞ –õ–∏—á–Ω—ã–π –±—é–¥–∂–µ—Ç")
dp.register_message_handler(process_salary, state=PersonalBudget.waiting_for_salary)
dp.register_message_handler(process_extra_income, state=PersonalBudget.waiting_for_extra_income)
dp.register_message_handler(process_dividends, state=PersonalBudget.waiting_for_dividends)
dp.register_message_handler(process_cashback, state=PersonalBudget.waiting_for_cashback)
dp.register_message_handler(process_rental_income, state=PersonalBudget.waiting_for_rental_income)
dp.register_message_handler(process_government_support,
                            state=PersonalBudget.waiting_for_government_support)
dp.register_message_handler(process_rent, state=PersonalBudget.waiting_for_rent)
dp.register_message_handler(process_groceries, state=PersonalBudget.waiting_for_groceries)
dp.register_message_handler(process_credits, state=PersonalBudget.waiting_for_credits)
dp.register_message_handler(process_other_expenses, state=PersonalBudget.waiting_for_other_expenses)
dp.register_message_handler(process_other_leisure, state=PersonalBudget.waiting_for_leisure)
dp.register_message_handler(process_education, state=PersonalBudget.waiting_for_education)
dp.register_message_handler(process_other_optional_expenses, state=PersonalBudget.waiting_for_other_optional_expenses)
dp.register_message_handler(credit_calculator, text="üè¶ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
dp.register_message_handler(process_principal, state=LoanState.waiting_for_principal)
dp.register_message_handler(process_interest_rate, state=LoanState.waiting_for_interest_rate)
dp.register_message_handler(process_duration, state=LoanState.waiting_for_duration)
dp.register_message_handler(financial_goal, text="üèÜ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ü–µ–ª—å")
dp.register_message_handler(future_cost_goal, text="üìà –ë—É–¥—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ü–µ–ª–∏")
dp.register_message_handler(process_present_value, state=FutureCostGoalStates.WaitingForPresentValue)
dp.register_message_handler(process_inflation_rate, state=FutureCostGoalStates.WaitingForInflationRate)
dp.register_message_handler(process_years, state=FutureCostGoalStates.WaitingForYears)

dp.register_message_handler(time_to_achieve_goal, text="‚è≥ –°—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏")
dp.register_message_handler(process_goal_name, state=TimeToAchieveGoalStates.WaitingForGoalName)
dp.register_message_handler(process_target_amount, state=TimeToAchieveGoalStates.WaitingForTargetAmount)
dp.register_message_handler(process_current_savings, state=TimeToAchieveGoalStates.WaitingForCurrentSavings)
dp.register_message_handler(process_monthly_savings, state=TimeToAchieveGoalStates.WaitingForMonthlySavings)
dp.register_message_handler(go_back_to_main_menu, text="üîô –ù–∞–∑–∞–¥")

dp.register_message_handler(tax_deduction, text="üí∏ –ù–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç")
dp.register_message_handler(social_deduction_handler, text="–°–æ—Ü–∏–∞–ª—å–Ω—ã–π")
dp.register_message_handler(sport_deduction_handler, text="–ù–∞ —Å–ø–æ—Ä—Ç")
dp.register_message_handler(process_sport_year, state=TaxDeduction2.waiting_for_year)
dp.register_message_handler(process_sport_expenses, state=TaxDeduction2.waiting_for_expenses)

dp.register_message_handler(healthcare_deduction_handler, text="–ù–∞ –ª–µ—á–µ–Ω–∏–µ –∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞")
dp.register_message_handler(process_healthcare_amount, state=TaxDeduction.waiting_for_healthcare)

dp.register_message_handler(education_deduction_handler, text="–ù–∞ –æ–±—É—á–µ–Ω–∏–µ")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞ —Å–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –±—Ä–∞—Ç–∞ –∏–ª–∏ —Å–µ—Å—Ç—Ä—ã, –∞ —Ç–∞–∫–∂–µ –º—É–∂–∞ –∏–ª–∏ –∂–µ–Ω—ã"
@dp.message_handler(Text(equals="–ù–∞ —Å–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –±—Ä–∞—Ç–∞ –∏–ª–∏ —Å–µ—Å—Ç—Ä—ã, –∞ —Ç–∞–∫–∂–µ –º—É–∂–∞ –∏–ª–∏ –∂–µ–Ω—ã"))
async def family_education_handler(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –æ–±—É—á–µ–Ω–∏—è (2021, 2022, 2023, 2024):")
    await MyStates.waiting_for_year.set()  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≥–æ–¥–∞ –æ–±—É—á–µ–Ω–∏—è


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≥–æ–¥–∞ –æ–±—É—á–µ–Ω–∏—è
@dp.message_handler(state=MyStates.waiting_for_year)
async def process_year(message: types.Message, state: FSMContext):
    year = message.text
    if year not in ["2021", "2022", "2023", "2024"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –æ–±—É—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (2021, 2022, 2023, 2024):")
        return
    await state.update_data(year=year)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ:")
    await MyStates.waiting_for_expenses.set()  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤
@dp.message_handler(state=MyStates.waiting_for_expenses)
async def process_expenses(message: types.Message, state: FSMContext):
    expenses = message.text
    try:
        expenses = float(expenses)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (—á–∏—Å–ª–æ):")
        return

    user_data = await state.get_data()
    year = user_data.get("year")
    tax_deduction = calculate_tax_deduction(year, expenses)
    if tax_deduction is not None:
        await message.answer(f"–†–∞–∑–º–µ—Ä –Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –≤—ã—á–µ—Ç–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {tax_deduction} ‚ÇΩ.")

    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# –î–æ–±–∞–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
@dp.message_handler(text="üîô –ù–∞–∑–∞–¥", state="*")
async def back(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥.")
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞ –æ–±—É—á–µ–Ω–∏–µ —Å–≤–æ–∏—Ö –∏–ª–∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö –¥–µ—Ç–µ–π"
@dp.message_handler(Text(equals="–ù–∞ –æ–±—É—á–µ–Ω–∏–µ —Å–≤–æ–∏—Ö –∏–ª–∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö –¥–µ—Ç–µ–π"))
async def children_education_handler(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –æ–±—É—á–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞ (2021, 2022, 2023, 2024):")
    await MyStates2.waiting_for_year_child.set()  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≥–æ–¥–∞ –æ–±—É—á–µ–Ω–∏—è


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≥–æ–¥–∞ –æ–±—É—á–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞
@dp.message_handler(state=MyStates2.waiting_for_year_child)
async def process_year_child(message: types.Message, state: FSMContext):
    year = message.text
    if year not in ["2021", "2022", "2023", "2024"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –æ–±—É—á–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (2021, 2022, 2023, 2024):")
        return
    await state.update_data(year=year)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞:")
    await MyStates2.waiting_for_expenses_child.set()  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞
@dp.message_handler(state=MyStates2.waiting_for_expenses_child)
async def process_expenses_child(message: types.Message, state: FSMContext):
    expenses = message.text
    try:
        expenses = float(expenses)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (—á–∏—Å–ª–æ):")
        return

    user_data = await state.get_data()
    year = user_data.get("year")
    tax_deduction = calculate_child_education_deduction(year, expenses)
    if tax_deduction is not None:
        await message.answer(f"–†–∞–∑–º–µ—Ä –Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –≤—ã—á–µ—Ç–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {tax_deduction} ‚ÇΩ.")

    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# –î–æ–±–∞–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
@dp.message_handler(text="üîô –ù–∞–∑–∞–¥", state="*")
async def back(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥.")
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"
@dp.message_handler(text="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", state=None)
async def standard_deduction(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∑–∞—Ä–ø–ª–∞—Ç—É –≤ –º–µ—Å—è—Ü:")
    await TaxDeductionState.WaitingForSalary.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç—ã
@dp.message_handler(state=TaxDeductionState.WaitingForSalary)
async def process_salary(message: types.Message, state: FSMContext):
    try:
        salary_per_month = float(message.text)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç—ã.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö –¥–µ—Ç–µ–π:")
    await state.update_data(salary_per_month=salary_per_month)
    await TaxDeductionState.WaitingForChildrenNumber.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ç–µ–π
@dp.message_handler(state=TaxDeductionState.WaitingForChildrenNumber)
async def process_children_number(message: types.Message, state: FSMContext):
    try:
        num_children = int(message.text)
        if num_children < 0:
            raise ValueError
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ç–µ–π.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –≤–∞—à–∏—Ö –¥–µ—Ç–µ–π, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
    await state.update_data(num_children=num_children)
    await TaxDeductionState.WaitingForChildrenAges.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ –¥–µ—Ç–µ–π
@dp.message_handler(state=TaxDeductionState.WaitingForChildrenAges)
async def process_children_ages(message: types.Message, state: FSMContext):
    children_ages = message.text.split()
    try:
        children_ages = [int(age) for age in children_ages]
        if any(age <= 0 for age in children_ages):
            raise ValueError
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ –¥–µ—Ç–µ–π.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    salary_per_month = data.get('salary_per_month')
    print(salary_per_month)
    print(children_ages)
    num_children = data.get('num_children')
    print(num_children)

    # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç
    result = calculate_tax_deduction2(salary_per_month, num_children, children_ages)

    if isinstance(result, float):
        await message.answer(f"–í–∞–º –¥–æ–ª–∂–Ω—ã –≤ –≥–æ–¥: {result:.2f} ‚ÇΩ")
    else:
        await message.answer(result)

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.finish()

dp.register_message_handler(property_deduction_handler, text="–ò–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π")
dp.register_message_handler(process_mortgage_answer, state=PropertyDeductionState.WaitingForMortgage)
dp.register_message_handler(process_mortgage_interest, state=PropertyDeductionState.WaitingForMortgageInterest)
dp.register_message_handler(process_property_value, state=PropertyDeductionState.WaitingForPropertyValue)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –î–æ–Ω–∞—Ç"
@dp.message_handler(text="üéÅ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–Ω–∞—Ç")
async def send_donation(message: types.Message):
    # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    photo_path = "photo_2024-03-22_10-40-40.jpg"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    with open(photo_path, "rb") as photo:
        await bot.send_photo(message.chat.id, photo, caption="–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –º–æ–π –ø—Ä–æ–µ–∫—Ç –æ—Ç–ø—Ä–∞–≤–∏–≤ –¥–æ–Ω–∞—Ç –Ω–∞ –ª—é–±—É—é —Å—É–º–º—É")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –∫–Ω–æ–ø–æ–∫
@dp.message_handler()
async def unknown_message(message: types.Message):
    await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
