from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from property_deduction import calculate_property_deduction
from fin_goal import calculate_future_value, calculate_amount_of_deductions
from financial_goal import calculate_time_and_savings
from social_deductions import calculate_tax_deduction
from state import LoanState, FutureCostGoalStates, TimeToAchieveGoalStates, PersonalBudget, DepositCalculationStates,\
    TaxDeduction, TaxDeduction2, PropertyDeductionState
from credit import Loan
from main2 import calculate_balance, calculate_deposit_amount
from keyboard import finance_keyboard


async def start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ finance bot!\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:",
                         reply_markup=finance_keyboard)


async def deposit_calculation(message: types.Message):
    await message.answer("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–∞—Å—á–µ—Ç –≤–∫–ª–∞–¥–∞.\n–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥–æ–≤—É—é —Å—Ç–∞–≤–∫—É (%):")
    await DepositCalculationStates.waiting_for_rate.set()


async def process_rate(message: types.Message, state: FSMContext):
    try:
        rate = float(message.text)
        await state.update_data(rate=rate)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤–∫–ª–∞–¥–∞ (–≤ –≥–æ–¥–∞—Ö):")
        await DepositCalculationStates.waiting_for_term.set()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≥–æ–¥–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ä–æ–∫–∞ –≤–∫–ª–∞–¥–∞
# @dp.message_handler(state=DepositCalculationStates.waiting_for_term)
async def process_term(message: types.Message, state: FSMContext):
    try:
        term = int(message.text)
        await state.update_data(term=term)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–∫–ª–∞–¥–∞:")
        await DepositCalculationStates.waiting_for_amount.set()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ä–æ–∫–∞ –≤–∫–ª–∞–¥–∞ (–≤ –≥–æ–¥–∞—Ö).")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –≤–∫–ª–∞–¥–∞ –∏ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
# @dp.message_handler(state=DepositCalculationStates.waiting_for_amount)
async def process_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        data = await state.get_data()
        rate = data.get("rate")
        term = data.get("term")
        total_amount = calculate_deposit_amount(rate, term, amount)
        await message.answer(f"–°—É–º–º–∞ –≤ –∫–æ–Ω—Ü–µ —Å—Ä–æ–∫–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç: {total_amount:.2f} ‚ÇΩ")
        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.finish()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—É–º–º—ã –≤–∫–ª–∞–¥–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üí∞ –õ–∏—á–Ω—ã–π –±—é–¥–∂–µ—Ç"
# @dp.message_handler(text="üí∞ –õ–∏—á–Ω—ã–π –±—é–¥–∂–µ—Ç")
async def personal_budget(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–æ—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü, —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:\n"
                         "1. –ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ –≤ –º–µ—Å—è—Ü")
    await PersonalBudget.waiting_for_salary.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
# @dp.message_handler(state=PersonalBudget.waiting_for_salary)
async def process_salary(message: types.Message, state: FSMContext):
    try:
        salary = float(message.text)
        await state.update_data(salary=salary)
        await message.answer("2. –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥:")
        await PersonalBudget.waiting_for_extra_income.set()
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")


# @dp.message_handler(state=PersonalBudget.waiting_for_extra_income)
async def process_extra_income(message: types.Message, state: FSMContext):
    try:
        extra_income = float(message.text)
        await state.update_data(extra_income=extra_income)
        await message.answer("3. –í–≤–µ–¥–∏—Ç–µ –¥–∏–≤–∏–¥–µ–Ω–¥—ã:")
        await PersonalBudget.waiting_for_dividends.set()
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")


# @dp.message_handler(state=PersonalBudget.waiting_for_dividends)
async def process_dividends(message: types.Message, state: FSMContext):
    try:
        dividends = float(message.text)
        await state.update_data(dividends=dividends)
        await message.answer("4. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã-–∫—ç—à–±—ç–∫:")
        await PersonalBudget.waiting_for_cashback.set()
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")


# @dp.message_handler(state=PersonalBudget.waiting_for_cashback)
async def process_cashback(message: types.Message, state: FSMContext):
    try:
        cashback = float(message.text)
        await state.update_data(cashback=cashback)
        await message.answer("5. –í–≤–µ–¥–∏—Ç–µ –¥–æ—Ö–æ–¥ –æ—Ç —Å–¥–∞—á–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –∞—Ä–µ–Ω–¥—É:")
        await PersonalBudget.waiting_for_rental_income.set()
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")


# @dp.message_handler(state=PersonalBudget.waiting_for_rental_income)
async def process_rental_income(message: types.Message, state: FSMContext):
    try:
        rental_income = float(message.text)
        await state.update_data(rental_income=rental_income)
        await message.answer("6. –í–≤–µ–¥–∏—Ç–µ –¥–æ—Ö–æ–¥ –æ—Ç –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞:")
        await PersonalBudget.waiting_for_government_support.set()
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")


# @dp.message_handler(state=PersonalBudget.waiting_for_government_support)
async def process_government_support(message: types.Message, state: FSMContext):
    try:
        government_support = float(message.text)
        await state.update_data(government_support=government_support)
        await message.answer(
                            "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü, —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:\n"
                            "1. –í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –∞—Ä–µ–Ω–¥—É:"
                             )
        await PersonalBudget.waiting_for_rent.set()
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")


# @dp.message_handler(state=PersonalBudget.waiting_for_rent)
async def process_rent(message: types.Message, state: FSMContext):
    try:
        rent = float(message.text)
        await state.update_data(rent=rent)
        await message.answer("2. –í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã:")
        await PersonalBudget.waiting_for_groceries.set()
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")


# @dp.message_handler(state=PersonalBudget.waiting_for_groceries)
async def process_groceries(message: types.Message, state: FSMContext):
    try:
        groceries = float(message.text)
        await state.update_data(groceries=groceries)
        await message.answer("3. –í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –∫—Ä–µ–¥–∏—Ç—ã:")
        await PersonalBudget.waiting_for_credits.set()
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")


# @dp.message_handler(state=PersonalBudget.waiting_for_credits)
async def process_credits(message: types.Message, state: FSMContext):
    try:
        credits = float(message.text)
        await state.update_data(credits=credits)
        await message.answer("4. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã:")
        await PersonalBudget.waiting_for_other_expenses.set()
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")


# @dp.message_handler(state=PersonalBudget.waiting_for_other_expenses)
async def process_other_expenses(message: types.Message, state: FSMContext):
    try:
        other_expenses = float(message.text)
        await state.update_data(other_expenses=other_expenses)
        await message.answer("5. –í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –æ—Ç–ø—É—Å–∫ –∏ —Ñ–∏—Ç–Ω–µ—Å:")
        await PersonalBudget.waiting_for_leisure.set()
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")


# @dp.message_handler(state=PersonalBudget.waiting_for_leisure)
async def process_other_leisure(message: types.Message, state: FSMContext):
    try:
        leisure = float(message.text)
        await state.update_data(leisure=leisure)
        await message.answer("5. –í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:")
        await PersonalBudget.waiting_for_education.set()
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")


# @dp.message_handler(state=PersonalBudget.waiting_for_education)
async def process_education(message: types.Message, state: FSMContext):
    try:
        education = float(message.text)
        await state.update_data(education=education)
        await message.answer("5. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—á–∏–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã:")
        await PersonalBudget.waiting_for_other_optional_expenses.set()
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–∞—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞
# @dp.message_handler(state=PersonalBudget.waiting_for_other_optional_expenses)
async def process_other_optional_expenses(message: types.Message, state: FSMContext):
    try:
        other_optional_expenses = float(message.text)
        async with state.proxy() as data:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            salary = data['salary']
            extra_income = data['extra_income']
            dividends = data['dividends']
            cashback = data['cashback']
            rental_income = data['rental_income']
            government_support = data['government_support']
            rent = data['rent']
            groceries = data['groceries']
            credits = data['credits']
            other_expenses = data['other_expenses']
            leisure = data['leisure']
            education = data['education']
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é calculate_balance —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            balance, total_income, total_expenses, savings_percentage = calculate_balance(
                salary, extra_income, dividends,
                cashback, rental_income,
                government_support, rent,
                groceries, credits,
                other_expenses, leisure,
                education,
                other_optional_expenses
            )
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(f"–í–∞—à –ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ\n"
                                 f"–ò—Ç–æ–≥–æ –¥–æ—Ö–æ–¥–æ–≤: {total_income} ‚ÇΩ\n"
                                 f"–ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_expenses} ‚ÇΩ\n"
                                 f"–í–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π: {savings_percentage:.2f}%")
            await state.finish()
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö—Ä–µ–¥–∏—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"
# @dp.message_handler(text="üè¶ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
async def credit_calculator(message: types.Message, state: FSMContext):
    await message.answer("–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫—Ä–µ–¥–∏—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞, –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É –∏ —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ –≤ –≥–æ–¥–∞—Ö, "
                         "–∫–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, —á–µ—Ä–µ–∑ Enter.")

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await LoanState.waiting_for_principal.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∫—Ä–µ–¥–∏—Ç–∞
# @dp.message_handler(state=LoanState.waiting_for_principal)
async def process_principal(message: types.Message, state: FSMContext):
    try:
        principal = float(message.text)
        await state.update_data(principal=principal)
        await LoanState.next()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É –≤ –≥–æ–¥:")
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏
# @dp.message_handler(state=LoanState.waiting_for_interest_rate)
async def process_interest_rate(message: types.Message, state: FSMContext):
    try:
        interest_rate = float(message.text)
        await state.update_data(interest_rate=interest_rate)
        await LoanState.next()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ –≤ –≥–æ–¥–∞—Ö:")
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ä–æ–∫–∞ –∫—Ä–µ–¥–∏—Ç–∞
# @dp.message_handler(state=LoanState.waiting_for_duration)
async def process_duration(message: types.Message, state: FSMContext):
    try:
        duration_years = int(message.text)
        await state.update_data(duration_years=duration_years)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        async with state.proxy() as data:
            principal = data['principal']
            interest_rate = data['interest_rate']
            duration_years = data['duration_years']

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∫—Ä–µ–¥–∏—Ç–∞
        credit_loan = Loan(principal=principal, interest_rate=interest_rate, duration_years=duration_years)

        # –°–∏–º—É–ª—è—Ü–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –∫—Ä–µ–¥–∏—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –∫—Ä–µ–¥–∏—Ç–∞
        for _ in range(duration_years * 12):
            credit_loan.make_payment()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {credit_loan.monthly_payment:.2f}")
        await message.answer(f"–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤: {credit_loan.total_interest_paid:.2f}")

        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.finish()

    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ü–µ–ª—å"
# @dp.message_handler(text="üèÜ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ü–µ–ª—å")
async def financial_goal(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    future_cost_button = KeyboardButton("üìà –ë—É–¥—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ü–µ–ª–∏")
    time_to_achieve_button = KeyboardButton("‚è≥ –°—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏")
    back_button = KeyboardButton("üîô –ù–∞–∑–∞–¥")
    keyboard.add(future_cost_button, time_to_achieve_button, back_button)

    await message.answer("–≠—Ç–æ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏. –ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–ª—å —Å —É—á–µ—Ç–æ–º –∏–Ω—Ñ–ª—è—Ü–∏–∏.",
                         reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ë—É–¥—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ü–µ–ª–∏"
# @dp.message_handler(text="üìà –ë—É–¥—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ü–µ–ª–∏")
async def future_cost_goal(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ü–µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è:")
    await FutureCostGoalStates.WaitingForPresentValue.set()


# @dp.message_handler(state=FutureCostGoalStates.WaitingForPresentValue)
async def process_present_value(message: types.Message, state: FSMContext):
    try:
        present_value = float(message.text)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    await state.update_data(present_value=present_value)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥–æ–≤—É—é —Å—Ç–∞–≤–∫—É –∏–Ω—Ñ–ª—è—Ü–∏–∏ (–≤ –¥–æ–ª—è—Ö):")
    await FutureCostGoalStates.WaitingForInflationRate.set()


# @dp.message_handler(state=FutureCostGoalStates.WaitingForInflationRate)
async def process_inflation_rate(message: types.Message, state: FSMContext):
    try:
        inflation_rate = float(message.text)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    await state.update_data(inflation_rate=inflation_rate)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏:")
    await FutureCostGoalStates.WaitingForYears.set()


# @dp.message_handler(state=FutureCostGoalStates.WaitingForYears)
async def process_years(message: types.Message, state: FSMContext):
    try:
        years = float(message.text)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    data = await state.get_data()
    present_value = data.get('present_value')
    inflation_rate = data.get('inflation_rate')

    future_value = calculate_future_value(present_value, inflation_rate, years)
    amount_of_deductions = calculate_amount_of_deductions(future_value, years)

    await message.answer(f"–ë—É–¥—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ü–µ–ª–∏ —á–µ—Ä–µ–∑ {years} –ª–µ—Ç: {future_value:.2f} ‚ÇΩ")
    await message.answer(f"–í–µ–ª–∏—á–∏–Ω–∞ –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–∏—Å–ª–µ–Ω–∏–π —Å–æ—Å—Ç–∞–≤–∏—Ç {amount_of_deductions:.2f} ‚ÇΩ")

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏"
# @dp.message_handler(text="‚è≥ –°—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏")
async def time_to_achieve_goal(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏:")
    await TimeToAchieveGoalStates.WaitingForGoalName.set()


# @dp.message_handler(state=TimeToAchieveGoalStates.WaitingForGoalName)
async def process_goal_name(message: types.Message, state: FSMContext):
    goal_name = message.text.strip()
    if not goal_name:
        await message.answer("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    await state.update_data(goal_name=goal_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫–æ–ø–∏—Ç—å:")
    await TimeToAchieveGoalStates.WaitingForTargetAmount.set()


# @dp.message_handler(state=TimeToAchieveGoalStates.WaitingForTargetAmount)
async def process_target_amount(message: types.Message, state: FSMContext):
    try:
        target_amount = float(message.text)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    await state.update_data(target_amount=target_amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Å—É–º–º—É –≤–∞—à–∏—Ö —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π:")
    await TimeToAchieveGoalStates.WaitingForCurrentSavings.set()


# @dp.message_handler(state=TimeToAchieveGoalStates.WaitingForCurrentSavings)
async def process_current_savings(message: types.Message, state: FSMContext):
    try:
        current_savings = float(message.text)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    await state.update_data(current_savings=current_savings)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –≥–æ—Ç–æ–≤—ã –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å –µ–∂–µ–º–µ—Å—è—á–Ω–æ –Ω–∞ –≤–∞—à—É —Ü–µ–ª—å:")
    await TimeToAchieveGoalStates.WaitingForMonthlySavings.set()


# @dp.message_handler(state=TimeToAchieveGoalStates.WaitingForMonthlySavings)
async def process_monthly_savings(message: types.Message, state: FSMContext):
    try:
        monthly_savings = float(message.text)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    data = await state.get_data()
    goal_name = data.get('goal_name')
    target_amount = data.get('target_amount')
    current_savings = data.get('current_savings')

    # –í—ã–∑–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ financial_goal.py
    result = await calculate_time_and_savings(goal_name, target_amount, current_savings, monthly_savings)
    await message.answer(result)

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
# @dp.message_handler(text="üîô –ù–∞–∑–∞–¥")
async def go_back_to_main_menu(message: types.Message):
    await start(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç"
# @dp.message_handler(text="üí∏ –ù–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç")
async def tax_deduction(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    standard_deduction_button = KeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π")
    social_deduction_button = KeyboardButton("–°–æ—Ü–∏–∞–ª—å–Ω—ã–π")
    investment_deduction_button = KeyboardButton("–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π")
    property_deduction_button = KeyboardButton("–ò–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π")
    back_button = KeyboardButton("üîô –ù–∞–∑–∞–¥")
    keyboard.row(standard_deduction_button)
    keyboard.row(social_deduction_button)
    keyboard.row(investment_deduction_button)
    keyboard.row(property_deduction_button)
    keyboard.row(back_button)

    await message.answer("–≠—Ç–æ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –≤—ã—á–µ—Ç–∞. –ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π,"
                         " —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π, –∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã—á–µ—Ç—ã.",
                         reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–æ—Ü–∏–∞–ª—å–Ω—ã–π"
# @dp.message_handler(text="–°–æ—Ü–∏–∞–ª—å–Ω—ã–π")
async def social_deduction_handler(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    education_button = KeyboardButton("–ù–∞ –æ–±—É—á–µ–Ω–∏–µ")
    healthcare_button = KeyboardButton("–ù–∞ –ª–µ—á–µ–Ω–∏–µ –∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞")
    sport_button = KeyboardButton("–ù–∞ —Å–ø–æ—Ä—Ç")
    back_button = KeyboardButton("üîô –ù–∞–∑–∞–¥")
    keyboard.row(education_button)
    keyboard.row(healthcare_button)
    keyboard.row(sport_button)
    keyboard.row(back_button)

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤—ã—á–µ—Ç–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:",
                         reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞ —Å–ø–æ—Ä—Ç"
# @dp.message_handler(text="–ù–∞ —Å–ø–æ—Ä—Ç")
async def sport_deduction_handler(message: types.Message, state: FSMContext):
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ–¥–∞
    await TaxDeduction2.waiting_for_year.set()

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    back_button = KeyboardButton("üîô –ù–∞–∑–∞–¥")
    keyboard.add(back_button)

    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì:",
                         reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –≥–æ–¥–∞
# @dp.message_handler(state=TaxDeduction2.waiting_for_year)
async def process_sport_year(message: types.Message, state: FSMContext):
    year = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –≥–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(year=year)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ —Å–ø–æ—Ä—Ç
    await TaxDeduction2.next()

    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ —Å–ø–æ—Ä—Ç:")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–± —É–∫–∞–∑–∞–Ω–∏–∏ —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ —Å–ø–æ—Ä—Ç
# @dp.message_handler(state=TaxDeduction2.waiting_for_expenses)
async def process_sport_expenses(message: types.Message, state: FSMContext):
    data = await state.get_data()
    year = data.get('year')
    expenses = message.text

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –≤—ã—á–µ—Ç–∞
    tax_deduction = calculate_tax_deduction(year, expenses)

    if tax_deduction is not None:
        await message.answer(f"–í–∞—à –Ω–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç –Ω–∞ —Å–ø–æ—Ä—Ç —Å–æ—Å—Ç–∞–≤–∏—Ç {tax_deduction} ‚ÇΩ.")
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –≤—ã—á–µ—Ç–∞. –£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞ –ª–µ—á–µ–Ω–∏–µ –∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"
# @dp.message_handler(text="–ù–∞ –ª–µ—á–µ–Ω–∏–µ –∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞")
async def healthcare_deduction_handler(message: types.Message, state: FSMContext):
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    await TaxDeduction.waiting_for_healthcare.set()

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    back_button = KeyboardButton("üîô –ù–∞–∑–∞–¥")
    keyboard.add(back_button)

    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –ª–µ—á–µ–Ω–∏–µ –∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:",
                         reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–± —É–∫–∞–∑–∞–Ω–∏–∏ —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤
# @dp.message_handler(state=TaxDeduction.waiting_for_healthcare)
async def process_healthcare_amount(message: types.Message, state: FSMContext):
    expenses = message.text

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –≤—ã—á–µ—Ç–∞
    tax_deduction = calculate_tax_deduction(2024, expenses)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≥–æ–¥ –≤—Å–µ–≥–¥–∞ 2024

    if tax_deduction is not None:
        await message.answer(f"–í–∞—à –Ω–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç –Ω–∞ –ª–µ—á–µ–Ω–∏–µ –∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç {tax_deduction} ‚ÇΩ.")
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –≤—ã—á–µ—Ç–∞.")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞ –æ–±—É—á–µ–Ω–∏–µ"
# @dp.message_handler(text="–ù–∞ –æ–±—É—á–µ–Ω–∏–µ")
async def education_deduction_handler(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    children_education_button = KeyboardButton("–ù–∞ –æ–±—É—á–µ–Ω–∏–µ —Å–≤–æ–∏—Ö –∏–ª–∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö –¥–µ—Ç–µ–π")
    family_education_button = KeyboardButton("–ù–∞ —Å–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –±—Ä–∞—Ç–∞ –∏–ª–∏ —Å–µ—Å—Ç—Ä—ã, –∞ —Ç–∞–∫–∂–µ –º—É–∂–∞ –∏–ª–∏ –∂–µ–Ω—ã")
    back_button = KeyboardButton("üîô –ù–∞–∑–∞–¥")
    keyboard.row(children_education_button)
    keyboard.row(family_education_button)
    keyboard.row(back_button)

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤—ã—á–µ—Ç–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ:",
                         reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π"
# @dp.message_handler(text="–ò–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π")
async def property_deduction_handler(message: types.Message):
    await message.answer("–ë—Ä–∞–ª–∏ –ª–∏ –≤—ã –∏–ø–æ—Ç–µ–∫—É (–¥–∞/–Ω–µ—Ç)?")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –Ω–∞–ª–∏—á–∏–∏ –∏–ø–æ—Ç–µ–∫–∏
    await PropertyDeductionState.WaitingForMortgage.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –Ω–∞–ª–∏—á–∏–∏ –∏–ø–æ—Ç–µ–∫–∏
# @dp.message_handler(state=PropertyDeductionState.WaitingForMortgage)
async def process_mortgage_answer(message: types.Message, state: FSMContext):
    answer = message.text.lower()
    if answer not in ['–¥–∞', '–Ω–µ—Ç']:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")
        return

    if answer == '–¥–∞':
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —É–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø–æ –∏–ø–æ—Ç–µ–∫–µ:")
        await PropertyDeductionState.WaitingForMortgageInterest.set()
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏–ª–∏ –¥–æ–º–∞:")
        await PropertyDeductionState.WaitingForPropertyValue.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã —É–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø–æ –∏–ø–æ—Ç–µ–∫–µ
# @dp.message_handler(state=PropertyDeductionState.WaitingForMortgageInterest)
async def process_mortgage_interest(message: types.Message, state: FSMContext):
    try:
        mortgage_interest = float(message.text)
        if mortgage_interest < 0:
            raise ValueError("–°—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
        return

    await state.update_data(mortgage_interest=mortgage_interest)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏–ª–∏ –¥–æ–º–∞:")
    await PropertyDeductionState.WaitingForPropertyValue.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã
# @dp.message_handler(state=PropertyDeductionState.WaitingForPropertyValue)
async def process_property_value(message: types.Message, state: FSMContext):
    try:
        property_value = float(message.text)
        if property_value < 0:
            raise ValueError("–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã, –¥–æ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–ª–∏—á–∏–∏ –∏–ø–æ—Ç–µ–∫–∏ –∏ —Å—É–º–º–µ —É–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    async with state.proxy() as data:
        mortgage_interest = data.get('mortgage_interest', 0)

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ property_deduction.py –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—ã—á–µ—Ç–∞
    deduction = calculate_property_deduction(property_value, mortgage_interest)

    await message.answer(f"–ò–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç —Å–æ—Å—Ç–∞–≤–∏—Ç: {deduction:.2f} ‚ÇΩ")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()
